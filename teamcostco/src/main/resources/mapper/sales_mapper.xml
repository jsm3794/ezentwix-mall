<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Sales">

    <!-- Sales Insert -->
    <insert id="insertSales" parameterType="sales" useGeneratedKeys="true" keyProperty="salesId">
        <selectKey keyProperty="salesId" resultType="long" order="BEFORE">
            SELECT sales_seq.nextval FROM dual
        </selectKey>

        INSERT INTO sales (
            sales_id, 
            social_id, 
            sale_date, 
            create_date, 
            payments_type, 
            sales_status
        ) VALUES (
            #{sales_id}, 
            #{social_id}, 
            CURRENT_TIMESTAMP, 
            CURRENT_TIMESTAMP, 
            #{payments_type}, 
            #{sales_status}
        )
    </insert>


    <!-- 소프트 딜리트: 판매 상태 업데이트 -->
    <update id="updateSalesStatus" parameterType="sales">
        UPDATE sales
        SET 
            sales_status = #{sales_status},
            update_date = CURRENT_TIMESTAMP
        WHERE sales_id = #{sales_id}
    </update>

    <!-- Sales Delete (실제 삭제 대신 소프트 딜리트) -->
    <!-- 기존 deleteSales 메소드를 소프트 딜리트로 대체 -->
    <update id="deleteSales" parameterType="long">
        UPDATE sales
        SET 
            sales_status = 'CANCELED',
            update_date = CURRENT_TIMESTAMP
        WHERE sales_id = #{sales_id}
    </update>

    <!-- Sales Select by ID -->
    <select id="selectSalesById" parameterType="long" resultMap="SalesResultMap">
        SELECT 
            sales_id, 
            social_id, 
            sale_date, 
            create_date, 
            update_date,
            payments_type, 
            sales_status,
            delivery_fee
        FROM sales 
        WHERE sales_id = #{sales_id}
    </select>

    <!-- Sales Select by Social ID -->
    <select id="selectSalesBySocialId" parameterType="String" resultMap="SalesResultMap">
        SELECT 
            sales_id, 
            social_id, 
            sale_date, 
            create_date, 
            update_date,
            payments_type, 
            sales_status,
            delivery_fee
        FROM sales
        WHERE social_id = #{social_id}
        ORDER BY sales_id DESC
    </select>

    <!-- Sales Select All -->
    <select id="selectAllSales" resultMap="SalesResultMap">
        SELECT 
            sales_id, 
            social_id, 
            sale_date, 
            create_date, 
            update_date,
            payments_type, 
            sales_status,
            delivery_fee
        FROM sales
    </select>

    <!-- SalesResultMap with SalesItems -->
    <resultMap id="SalesResultMap" type="sales">
        <id property="sales_id" column="sales_id" />
        <result property="social_id" column="social_id" />
        <result property="sale_date" column="sale_date" />
        <result property="create_date" column="create_date" />
        <result property="update_date" column="update_date" />
        <result property="payments_type" column="payments_type" />
        <result property="sales_status" column="sales_status" />
        <result property="delivery_fee" column="delivery_fee" />
        <collection property="sales_items" ofType="salesItems" select="selectSalesItemsBySalesId" column="sales_id"/>
    </resultMap>

    <!-- SalesItem Insert -->
    <insert id="insertSalesItem" parameterType="salesItems" useGeneratedKeys="true" keyProperty="salesItemId">
        <selectKey keyProperty="salesItemId" resultType="long" order="BEFORE">
            SELECT sales_items_seq.nextval FROM dual
        </selectKey>

        INSERT INTO sales_items (
            sales_item_id, 
            sales_id, 
            product_code,
            qty, 
            unit_price, 
            total_price
        ) VALUES (
            #{sales_item_id}, 
            #{sales_id}, 
            #{product_code}, 
            #{qty}, 
            #{unit_price}, 
            #{total_price}
        )
    </insert>

    <!-- SalesItem Select by ID -->
    <select id="selectSalesItemById" parameterType="long" resultType="salesItems">
        SELECT 
            s.sales_item_id, 
            s.sales_id, 
            s.product_code,
            p.product_name,
            s.qty, 
            s.unit_price, 
            s.total_price
        FROM sales_items s INNER JOIN products p ON s.product_code = p.product_code
        WHERE sales_item_id = #{sales_item_id}
    </select>

    <!-- SalesItem Select by Sales ID -->
    <select id="selectSalesItemsBySalesId" parameterType="long" resultType="salesItems">
        SELECT 
            s.sales_item_id, 
            s.sales_id, 
            s.product_code, 
            p.product_name,
            s.qty, 
            s.unit_price, 
            s.total_price
            FROM sales_items s INNER JOIN products p ON s.product_code = p.product_code
        WHERE sales_id = #{sales_id}
    </select>

    <!-- SalesItem Select All -->
    <select id="selectAllSalesItems" resultType="salesItems">
        SELECT 
            s.sales_item_id, 
            s.sales_id, 
            s.product_code, 
            p.product_name,
            s.qty, 
            s.unit_price, 
            s.total_price
            FROM sales_items s INNER JOIN products p ON s.product_code = p.product_code
    </select>

</mapper>
